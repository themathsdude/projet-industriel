// paramètres du tube

real diametreTube = 1e-1;
real rayonTube = diametreTube / 2;

real alpha = pi / 4;     // angle incidence
real longueurTubeY = 1;  // longueur sur l'axe des abscisses de la partie en Y
real longueurTube1 = 1;  // longueur sur l'axe des abcisses de la suite du Y
real d0 = diametreTube / sin(alpha) - rayonTube / tan(alpha);

// paramètres de la section de chauffe

real[int] translationChauffe = [ rayonTube, rayonTube ];
int nbTubeChauffe = 2;
real espacementTubeChauffe = 2e-1;
real hauteurTubeChauffe = 4 * rayonTube;

// liste des points de la partie en Y du tube

real[int] p1 = [ longueurTubeY + d0 + longueurTube1, -rayonTube ];
real[int] p2 = [ longueurTubeY + d0, -rayonTube ];
real[int] p3 = [ 0, -longueurTubeY *tan(alpha) - diametreTube / cos(alpha) ];
real[int] p4 = [ 0, -longueurTubeY *tan(alpha) ];
real[int] p5 = [ longueurTubeY, 0 ];
real[int] p6 = [ 0, longueurTubeY *tan(alpha) ];
real[int] p7 = [ 0, longueurTubeY *tan(alpha) + diametreTube / cos(alpha) ];
real[int] p8 = [ longueurTubeY + d0, rayonTube ];
real[int] p9 = [ longueurTubeY + d0 + longueurTube1, rayonTube ];

// construction des bords de la partie en Y du tube

border bord1(t = 0, 1) {
  x = p1[0] + t * (p2[0] - p1[0]);
  y = p1[1] + t * (p2[1] - p1[1]);
}

border bord2(t = 0, 1) {
  x = p2[0] + t * (p3[0] - p2[0]);
  y = p2[1] + t * (p3[1] - p2[1]);
}

border bord3(t = 0, 1) {
  x = p3[0] + t * (p4[0] - p3[0]);
  y = p3[1] + t * (p4[1] - p3[1]);
}

border bord4(t = 0, 1) {
  x = p4[0] + t * (p5[0] - p4[0]);
  y = p4[1] + t * (p5[1] - p4[1]);
}

border bord5(t = 0, 1) {
  x = p5[0] + t * (p6[0] - p5[0]);
  y = p5[1] + t * (p6[1] - p5[1]);
}

border bord6(t = 0, 1) {
  x = p6[0] + t * (p7[0] - p6[0]);
  y = p6[1] + t * (p7[1] - p6[1]);
}

border bord7(t = 0, 1) {
  x = p7[0] + t * (p8[0] - p7[0]);
  y = p7[1] + t * (p8[1] - p7[1]);
}

border bord8(t = 0, 1) {
  x = p8[0] + t * (p9[0] - p8[0]);
  y = p8[1] + t * (p9[1] - p8[1]);
}

// construction de la partie de chauffe

border jonctionBas(t = 1, 0) {
  x = p1[0] + t * (translationChauffe[0] + diametreTube);
  y = p1[1] + (translationChauffe[1] + diametreTube) * (1 - sqrt(1 - t ^ 2));
}

border jonctionHaut(t = 0, 1) {
  x = p9[0] + t * translationChauffe[0];
  y = p9[1] + translationChauffe[1] * (1 - sqrt(1 - t ^ 2));
}

border bordHautTube(t = 0, 1) {
  x = p9[0] + translationChauffe[0];
  y = p9[1] + translationChauffe[1] +
      t * (hauteurTubeChauffe - (p9[1] + translationChauffe[1]));
}

border bordBasTube(t = 1, 0) {
  x = p1[0] + (translationChauffe[0] + diametreTube);
  y = p1[1] + (translationChauffe[1] + diametreTube) +
      t * (hauteurTubeChauffe -
           (p1[1] + (translationChauffe[1] + diametreTube)));
}

// border bord15 = bord1 + bord2;

/*
for (int i = 0; i < nbTubeChauffe; i++) {
  border tube1gauche(t = 0, 1) {
    x = p1[0] + translationChauffe[0] + espacementTubeChauffe;
    y = -hauteurTubeChauffe + t * 2 * hauteurTubeChauffe;
  }
  bordHautTube += tube1gauche;
  border tube1droit(t = 1, 0) {
    x = p1[0] + translationChauffe[0] + espacementTubeChauffe + diametreTube;
    y = -hauteurTubeChauffe + t * 2 * hauteurTubeChauffe;
  }
  bordBasTube = bordBasTube + tube1droit;
}
*/

int nbArretes = 10;

// affichage du domaine

plot(bord1(nbArretes) + bord2(nbArretes) + bord3(nbArretes) + bord4(nbArretes) +
     bord5(nbArretes) + bord6(nbArretes) + bord7(nbArretes) + bord8(nbArretes) +
     jonctionBas(nbArretes) + jonctionHaut(nbArretes) +
     bordHautTube(nbArretes) + bordBasTube(nbArretes));