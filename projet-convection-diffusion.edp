mesh Th = readmesh("mailles/projet-section-constante.msh");

// paramètres de la géométrie

real alpha0 = pi / 4;     // angle incidence
real longueurTube1 = 1e-5;  // longueur du tube d'injection
real longueurTube2 = 1e-5;  // longueur sur l'axe des abscisses de la suite du Y
real longueurTube3 = 1e-5;  // longueur sur l'axe des abscisses sortie de chauffe
real longueurOscillations = 2e-5;
real diametreTube = 1e-6;
real rayonTube = diametreTube / 2;
real h = diametreTube * 1e-1;

real longueurTube1x = longueurTube1 * cos(alpha0);
real d0 = diametreTube / sin(alpha0) - rayonTube / tan(alpha0);

real largeur = diametreTube;        // diamètre / largeur
real longueur = longueurTube1 + longueurTube2
		 + longueurOscillations + longueurTube3;
real lbar = longueur;

// paramètres de l'équation aux dérivées partielles
// liés à la géométrie
real xbar = largeur;        // diamètre canaux
real ubar = 1e-3;           // vitesse de l’écoulement

// liés au fluide
real rho = 1e3;             // masse volumique
real eta = 1.753e-3; 	    // viscosité dynamique (eau a 0 degrés)
real eta20 = 1e-3; 	        // viscosité dynamique (eau a 20 degrés)
real gamma = 2e-14;         // diffusion

// liés à l'expérience
real tbar = sqrt(rho * xbar^3 / (eta20 * ubar));       // temps caractéristique
//real tbar = 1e-3;
real pbar = 8 * ubar * eta20 * lbar / (xbar^2);
real cbar = 200;        // concentration caractéristique
real tempFroide = 20;   // en degrés
real tempChaude = 90;

// conditions aux bords

real pressionAtm = 0;
real pressionEntree = pressionAtm + pbar;
real pressionSortie = pressionAtm;

real dP = pressionEntree - pressionSortie;
func uxini = - dP/(2*eta20*lbar)*(y-largeur)*(y);  // vitesse entrée
func uyini = 0;

cout << "pbar = " << pbar << endl << "tbar = " << tbar << endl;

// vitesse de l'ordre de pbar * xbar^2 / (2 * 4 * eta * L) 
// = pbar * 1e-12 / (8 * 1e-3 * L)
// = pbar * 1e-9 / (8 * 5 * 1e-6) = pbar * 1e-4 / 4
// donc il faut un temps de l'ordre de longueur / (pbar * 1e-4 / 4) 
// = 1 / (5 * pbar) pour observer l'écoulement sur ce tuyau

// paramètres de la simulation

int typeSchema = 1;         // Euler implicite
real stabilisation = 1e-10; // coefficient de stabilisation
real T = 10 * longueur / ubar;   // temps final de simulation
real tau = T / 20;          // pas de simulation
int M = T / tau;            // nombre d'instants de simulation

// labels des bords

int labelBordNeutre = 0;
int labelEntree1 = 1;
int labelEntree2 = 2;
int labelHautChauffe = 3;
int labelBasChauffe = 4;
int labelSortie = 5;

// fonction d'adaptation de la viscosité dynamique

func real alpha(real theta){
    real a, b, c, d, e, f;
    a = -2.53958848e-16;
    b = -2.76506905e-12;
    c = 5.95400333e-10;
    d = -4.52299564e-08;
    e = 1.72329803e-06;
    return (a * theta^4 + b * theta^3 + c * theta^2 + d * theta + e)/(1.753*1e-6);
}

// définition des espaces éléments finis et du problème

fespace Ph0(Th, P0);        // pour les indicatrices de région
fespace Ph1(Th, P1);        // pour la pression, température et viscosité
fespace Ph2(Th, P2);        // pour la concentration
fespace Vh2(Th, [P2, P2]);  // pour la vitesse

// fonction pour la viscosité

real x1chauffe = longueurTube1x + longueurTube2 + d0 + diametreTube;
real x2finchauffe = x1chauffe + longueurOscillations;

real hChauffe = 15*h;

Ph1 alphaOmega = 
    (x1chauffe < x & x < x2finchauffe)
        * alpha(tempChaude)
    + (x < x1chauffe - hChauffe || x2finchauffe + hChauffe < x )
        * alpha(tempFroide)
    + (x1chauffe - hChauffe < x & x < x1chauffe)
        * (alpha(tempFroide) + (alpha(tempChaude) - alpha(tempFroide))
        * (x - (x1chauffe - hChauffe)) / hChauffe)
    + (x2finchauffe < x & x < x2finchauffe + hChauffe)
        * (alpha(tempChaude) + (alpha(tempFroide) - alpha(tempChaude))
        * (x - x2finchauffe) / hChauffe)
        ;

/*
Ph1 alphaOmega = (x1chauffe < x & x < x2finchauffe) ? 1 : 0.1;
*/
real tempFroideK = tempFroide + 273;
real tempChaudeK = tempChaude + 273;

Ph1 thetaOmega = 
    (x1chauffe < x & x < x2finchauffe)
        * (tempChaudeK)
    + (x < x1chauffe - hChauffe || x2finchauffe + hChauffe < x )
        * (tempFroideK)
    + (x1chauffe - hChauffe < x & x < x1chauffe)
        * (tempFroideK + (tempChaudeK - tempFroideK)
        * (x - (x1chauffe - hChauffe)) / hChauffe)
    + (x2finchauffe < x & x < x2finchauffe + hChauffe)
        * (tempChaudeK + (tempFroideK - tempChaudeK)
        * (x - x2finchauffe) / hChauffe)
        ;

plot(alphaOmega, value = 1, fill = 1, wait = 1, cmm = "alphaOmega");
plot(thetaOmega, value = 1, fill = 1, wait = 1, cmm = "thetaOmega");

// marcos

macro grad(u) [dx(u), dy(u)]                //
macro Grad(U) [grad(U#x), grad(U#y)]        //
macro divergence(ux, uy) (dx(ux) + dy(uy))  //

// fonctions éléments finis

Vh2 [ux, uy];   // vitesse recherchée
Vh2 [uux, uuy]; // vitesses à l'instant précédent
Ph1 p;          // pression recherchée
Vh2 [uxinih, uyinih] = [ uxini, uyini ]; // vitesses initiales interpolées

Vh2 [vx, vy];   // fonction test vitesse
Ph1 q;          // fonction test pression

Ph2 c, v;       // concentration et fonction test
Ph2 cc;         // concentration à l'instant précédent
// pas besoin d'initialiser c, on le cherche

cc = 0;

// problème de Stokes

problem Stokes([ ux, uy, p ], [ vx, vy, q ]) =

    // terme inertiel
    
    int2d(Th)(
                (rho / tau ) * [ux, uy]' * [vx, vy]
    )
  + int2d(Th)(
                - (rho / tau ) * [uux, uuy]' * [vx, vy]
    )
    
    // termes de viscosité, incompressibilité, pression
    
  - int2d(Th)(
                typeSchema * (
                - alphaOmega * eta * 
                (grad(ux) ' * grad(vx) + grad(uy)' * grad(vy))
                + divergence(ux, uy) * q
                + divergence(vx, vy) * p
                //+ stabilisation * p * q
                )
    )
    
    // termes de bord en flux sortant

  - int1d(Th, labelEntree1, labelEntree2, labelSortie)(
                            typeSchema * alphaOmega * eta * (
                            [N.x, N.y] ' * grad(ux) * vx 
                          + [N.x, N.y] ' * grad(uy) * vy )
    )
    

    // terme de bord en pression

  - int1d(Th, labelEntree1, labelEntree2, labelSortie)(
                            - p * [N.x, N.y]' * [vx, vy]
    )
    
    // termes qui dépendent de u pour l'autre schéma :
    
  - int2d(Th)(
                (1 - typeSchema) * (
                - alphaOmega * eta * 
                (grad(uux) ' * grad(vx) + grad(uuy)' * grad(vy))
                + divergence(uux, uuy) * q
                //+ stabilisation * p * q
                )
    )
  - int2d(Th)(
                (1 - typeSchema) * divergence(vx, vy) * p
  )
    
    // termes de bord en flux sortant

  - int1d(Th, labelEntree1, labelEntree2, labelSortie)(
                            (1 - typeSchema) * alphaOmega * eta * N.x *
                            (dx(uux) * vx + dx(uuy) * vx)
    )
    

    //+ on(labelEntree, ux = uxinih, uy = uyinih)  // entree profil Poiseuille
    //+ on(labelEntree, uy = uyinih)  // entree vitesse unidimensionnelle
    + on(labelEntree1, p = pressionEntree)
    + on(labelEntree2, p = pressionEntree)
    + on(labelSortie, p = pressionSortie)
    + on(labelBordNeutre, labelBasChauffe, labelHautChauffe, ux = 0, uy = 0)    
    		// bords solides
    ;

// problème de convection-diffusion

problem ConvectionDiffusion(c, v) = 
      int2d(Th)(c * v / tau)
      
    - int2d(Th)(cc * v / tau)
    
    + int2d(Th)(
    		    typeSchema * (thetaOmega * gamma * grad(c) ' * grad(v)
            	+ grad(c) ' * [ux, uy] * v)
    )

    //- int1d(Th, labelNeutre)(thetaOmega * gamma * N.x * dx(cc) * v )
    /*
    - int1d(Th, labelEntree)(
                typeSchema * thetaOmega * gamma * grad(c)' * [N.x, N.y] * v
    )
    */
    + int2d(Th)(
                (1 - typeSchema) * (thetaOmega * gamma * grad(cc) ' * grad(v)
                + grad(cc) ' * [ux, uy] * v)
    )
    //- int1d(Th, labelNeutre)(thetaOmega * gamma * N.x * dx(cc) * v )
    
    - int1d(Th, labelEntree1, labelEntree2)(
                (1 - typeSchema) * thetaOmega * gamma 
                * grad(cc)' * [N.x, N.y] * v 
    )
    + on(labelEntree1, c = cbar)
    ;


// résolution du problème pas à pas

for (int i = 1; i <= M; i++){    
    // résolution des problèmes
    Stokes;
    ConvectionDiffusion;
    
    // mise à jour des conditions
    cc = c;
    [uux, uuy] = [ux, uy];

    // affichage
    plot(c, value = 1, fill = 1, wait = 1, cmm = "concentration P2");
    //plot(p, [ux, uy], value = 1, fill = 1, wait = 1, cmm = "vitesse P2");
    // plot( [ ux, uy ], value = 1, fill = 1, cmm = "champ de vitesse P2");
    cout << "t =" << tau*i << endl;
}


























