// fonction paramétrique qui dessine le Y du tube
// type func, renvoie un vecteur real[int] nommé y_tube

/*
func real[int] y_tube(2) (real t, real hauteur_y, real longueur_y, real rayon_tube) {
	
	real alpha = atan(hauteur_y/longueur_y);
	real[int] p1(2) = [L, -rayon_tube];
	real[int] p2(2) = [0, -hauteur_y -rayon_tube*cos(alpha)];
	real[int] y_tube(2) = [L - t*L, -rayon_tube + (-hauteur_y -rayon_tube*cos(alpha)
									+rayon_tube)*t];
	return y_tube;
}
ou faire une lambda fonction pour capturer les paramètres dont on a besoin
ou alors donner les paramètres dans border, sauf t
*/

// fonction qui renvoie les coefficients du polynome pour l'interpolation de
// degré 3 entre A(xa, ya) et B(xb, yb) avec une penteA en A et penteB en B
// le proof of concept est donné dans le fichier python, mais l'inversion de
// matrice ne fonctionne pas ici encore ..
// ça marche maintenant, mais j'ai trouvé une ruse on en a plus besoin xd
// peut être quand même l'utiliser ?

/*
func real[int] interpolation(real[int] A, real[int] B, real penteA,
                             real penteB) {
  matrix vandermonde =
      [[A [0] ^ 3, A [0] ^ 2, A [0], 1], [B [0] ^ 3, B [0] ^ 2, B [0], 1],
       [3 * A [0] ^ 2, 2 * A [0], 1, 0], [3 * B [0] ^ 2, 2 * B [0], 1, 0]];
  real[int] sndmembre = [ A[1], B[1], penteA, penteB ];
  set(vandermonde, solver = sparsesolver);
  real[int] sol = vandermonde ^ -1 * sndmembre;
  return sol;
}

real[int] A = [0, 0];
real[int] B = [1, 1];

real[int] coeffs2 = interpolation(A, B, 0, 9);
cout << coeffs2;
// ne fonctionait pas, en attendant, on interpole sur [0, 1] et on translate :

*/

l'inverse de : A avec les colonnes inversées
c'est
les lignes inversées de inv(A)