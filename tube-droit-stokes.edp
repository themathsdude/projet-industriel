mesh Th = readmesh("mailles/tuyau-droit-gros-1700-elm.msh");

// paramètres de la géométrie

real largeur = 1e-6;        // diamètre / largeur
real longueur = 5*largeur;  // longueur du tube
real Lc = 1*largeur;        // longueur partie chauffe

// paramètres de l'équation aux dérivées partielles
// liés à la géométrie
real xbar = largeur;        // diamètre canaux
real ubar = 1e-3;           // vitesse de l’écoulement pour microfluidique

// liés au fluide
real rho = 1e3;             // masse volumique
real eta = 1.753e-3; 	    // viscosité dynamique (eau a 0 degrés)
real eta20 = 1e-3; 	        // viscosité dynamique (eau a 20 degrés)
real gamma = 7e-15;         // diffusion

// liés à l'expérience
//real tbar = 1e-2;         // temps caractéristique
real tbar = sqrt(rho * xbar^3 / (eta20 * ubar));
real pbar = 8 * ubar * eta20 * longueur / (xbar^2);
real cbar = 200;            // concentration caractéristique
real tempFroide = 20;       // en degrés
real tempChaude = 80;
real lbar = longueur;       

// conditions aux bords

real pressionAtm = 0;
real pressionEntree = pressionAtm + pbar;
real pressionSortie = pressionAtm;

real dP = pressionEntree - pressionSortie;
func uxini = - dP/(2*eta20*lbar)*(y-largeur)*(y);  // vitesse entrée
func uyini = 0;

// paramètres de la simulation

int typeSchema = 1;         // Euler implicite
real stabilisation = 1e-10; // coefficient de stabilisation
real T = 5 * tbar / rho;    // temps final de simulation
real tau = T / 20;          // pas de simulation
int M = T / tau;            // nombre d'instants de simulation

// fonction d'adaptation de la viscosité dynamique

func real alpha(real theta){
    real a, b, c, d, e, f;
    a = -2.53958848e-16;
    b = -2.76506905e-12;
    c = 5.95400333e-10;
    d = -4.52299564e-08;
    e = 1.72329803e-06;
    return (a * theta^4 + b * theta^3 + c * theta^2 + d * theta + e)/(1.753*1e-6);
}

// labels des bords

int labelNeutre = 0;
int labelEntree = 1;
int labelChauffex = 2;
int labelChauffey = 3;
int labelSortie = 4;

// définition des espaces éléments finis et du problème

fespace Ph0(Th, P0);        // pour les indicatrices de région
fespace Ph1(Th, P1);        // pour la pression
fespace Ph2(Th, P2);        // pour la température
fespace Vh2(Th, [P2, P2]);  // pour la vitesse

Ph0 indicRegion = region;
int labelRegionChaud = indicRegion(longueur/2, largeur/2);

Ph1 alphaOmega = (indicRegion == labelRegionChaud)*alpha(tempChaude)
		 + (indicRegion != labelRegionChaud)*alpha(tempFroide);
		 // vaut alpha(tempChaude) sur region chaude
plot(alphaOmega, value = 1, fill = 1, wait = 1);

// macros

macro grad(u) [dx(u), dy(u)]                //
macro Grad(U) [grad(U#x), grad(U#y)]        //
macro divergence(fx, fy) (dx(fx) + dy(fy))  //

// fonctions éléments finis et définition du problème

Vh2 [ux, uy];   // vitesse recherchée
Vh2 [uux, uuy]; // vitesses à l'instant précédent
Ph1 p;          // pression recherchée
Vh2 [uxinih, uyinih] = [ uxini, uyini ]; // vitesses initiales interpolées

Vh2 [vx, vy];   // fonction test vitesse
Ph1 q;          // fonction test pression
 
// [uux, uuy] = [0, 0];  // conditions initiales nulles

problem Stokes([ ux, uy, p ], [ vx, vy, q ]) =

    // terme inertiel
    
    int2d(Th)(
                (rho / tau ) * [ux, uy]' * [vx, vy]
    )
  + int2d(Th)(
                - (rho / tau ) * [uux, uuy]' * [vx, vy]
    )
    
    // termes de viscosité, incompressibilité, pression
    
  - int2d(Th)(
                typeSchema * (
                - alphaOmega * eta * 
                (grad(ux) ' * grad(vx) + grad(uy)' * grad(vy))
                + divergence(ux, uy) * q
                + divergence(vx, vy) * p
                //+ stabilisation * p * q
                )
    )
    
    // termes de bord en flux sortant

  - int1d(Th, labelEntree, labelSortie)(
                            typeSchema * alphaOmega * eta * N.x *
                            (dx(ux)*vx + dx(uy)*vx )
    )
    

    // terme de bord en pression

  - int1d(Th, labelEntree, labelSortie)(
                            - p * vx * N.x
    )
  
    // termes qui dépendent de u pour l'autre schéma :
    
  - int2d(Th)(
                (1 - typeSchema) * (
                - alphaOmega * eta * 
                (grad(uux) ' * grad(vx) + grad(uuy)' * grad(vy))
                + divergence(uux, uuy) * q
                //+ stabilisation * p * q
                )
    )
  - int2d(Th)(
                (1 - typeSchema) * divergence(vx, vy) * p
  )
    
    // termes de bord en flux sortant

  - int1d(Th, labelEntree, labelSortie)(
                            (1 - typeSchema) * alphaOmega * eta * N.x *
                            (dx(uux) * vx + dx(uuy) * vx)
    )
    

    //+ on(labelEntree, ux = uxinih, uy = uyinih)  // entree profil Poiseuille
    + on(labelEntree, uy = uyinih)  // entree vitesse unidimensionnelle
    + on(labelEntree, p = pressionEntree)
    + on(labelSortie, p = pressionSortie)
    + on(labelNeutre, labelChauffex, ux = 0, uy = 0)    // bords solides
    ;

// résolution du problème pas à pas

for (int i = 1; i <= M; i++){
    // résolution du problème de Stokes
    Stokes;
    
    // mise à jour des conditions
    [uux, uuy] = [ux, uy];
    
    // affichage
    plot(p, [ux, uy ],  wait = 1, fill = 1, value = 1, 
        cmm = "champ scalaire de pression P1 et champ vectoriel de vitesse P2");
    cout << "t =" << tau*i << endl;
}











