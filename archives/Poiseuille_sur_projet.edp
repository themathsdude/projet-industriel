// paramètres de l'EDP
real dt = 0.1;
real mu = 1;
real dP = 0.5;
real theta = 1;

// Constantes d'adimensionnement
real vbar, xbar, ubar, pbar, tbar, eta, gamma, rho;

vbar = 1e-12;   //volumes
eta = 1.005e-6; //Viscosite dynamique (eau a 20 degres)
xbar = 1e-6;    //Diametre canaux
ubar = 1e-3;    //Vitesse de l’ecoulement
pbar = 1e4;     //pression caracteristique 
tbar = 1; 
gamma = 0.1; //viscosite/diffusion
rho = 1e3;

cout << "xbar^2/tbar = " << xbar^2/tbar << endl;
cout << "(ubar*xbar) = " << ubar*xbar << endl << endl;

real Re = xbar*ubar/eta;

func real visc(real theta){
    real a, b, c, d, e, f;
    a = -2.53958848e-16;
    b = -2.76506905e-12;
    c = 5.95400333e-10;
    d = -4.52299564e-08;
    e = 1.72329803e-06;

    return (a * theta^4 + b * theta^3 + c * theta^2 + d * theta + e)/(1.753*1e-6);
}

real tschema = 1;

Re = ((xbar^2)/(visc(20)*tbar))^2;

// labels des bords du maillage

mesh Th = readmesh("../mailles/projet-section-constante.msh");

real alpha = pi / 4;     // angle incidence
real longueurTube1 = 1;  // longueur du tube d'injection
real diametreTube = 1e-1;
real rayonTube = diametreTube / 2;

int labelBordNeutre = 0;
int labelEntree1 = 1;
int labelEntree2 = 2;
int labelHautChauffe = 3;
int labelBasChauffe = 4;
int labelSortie = 5;

plot(Th, wait = 1);

//Macro
macro Grad(u) [dx(u), dy(u)] //

// Fespace
fespace Vh(Th, P1);
Vh c, v, cc, uxc, uyc, b, beta;
beta =  longueurTube1 < x & x < 2*longueurTube1 ? 1: 0.1;
// real dP = 0.5;

// profil de Poiseuille
func ux1 = dP / (2 * mu) * (y - rayonTube) * (y + rayonTube) * cos(alpha);
func uy1 = dP / (2 * mu) * (y - rayonTube) * (y + rayonTube) * sin(-alpha) +
     longueurTube1 * sin(alpha);

func ux12 = dP / (2 * 5*mu) * (y - rayonTube) * (y + rayonTube) * cos(alpha);
func uy12 = dP / (2 * 5*mu) * (y - rayonTube) * (y + rayonTube) * sin(-alpha) +
     longueurTube1 * sin(alpha);

real t = 0;

// Problem implicite coeffs ad
problem dConvecDiffTps (c, v)
    = int2d(Th)(
          (xbar^2/tbar)*c*v
        + (ubar*xbar)*dt*(tschema*[uxc, uyc]'*Grad(c)*v
        + tschema*gamma*beta*Grad(c)'*Grad(v) 
        )
    )
    // - int1d(Th, labelEntree1)(
    //     (ubar*xbar)*dt*tschema*gamma*beta*[N.x, N.y]'*Grad(c)*v
    // )
    + int2d(Th)(
        - (xbar^2/tbar)*cc*v
        + (ubar*xbar)*(1-tschema)*dt*[uxc, uyc]'*Grad(cc)*v 
        + (ubar*xbar)*(1-tschema)*dt*gamma*beta*Grad(cc)'*Grad(v)

    )
    // - int1d(Th, 4)(
    //     (ubar*xbar)*(1-tschema)*dt*gamma*beta*[N.x, N.y]'*Grad(cc)*v
    // )
    //+ on(1, 2, 3, 5, 7, 9, 11, 12, c=0)
    + on(labelEntree2, c = 0)
    + on(labelEntree1, c = (10*sin(t))^2 )
    ; 
// Time loop
cc = 0;

// macros  
macro dn(u) ( dx(u)*N.x+dy(u)*N.y )//
macro div(u,v) ( dx(u)+dy(v) )//

// finite element spaces et functions
// comment the lines depdending of the choice 
// -- P2/P1 ---
fespace Xh(Th,P2);
fespace Mh(Th,P1);
real gammap = 0.0;

// -- P1/P1 
// fespace Xh(Th,P1);
// fespace Mh(Th,P1);
// real gammap = 0.01;

Xh ux, uy, vx, vy, uxo, uyo;
Mh p, q, uxplot, uyplot;

t=0;
// boundary data 
func uxdata = 2.*x*(1-x)+cos(pi*t);
func ux2 = -dP/(2*mu)*(y-longueurTube1*sin(alpha))*(y-((longueurTube1+diametreTube)*sin(alpha)));
func uy2 = 0;

// parameter to fix the pressure mean 
real epsilon = 1e-10;
tschema = 1;
// Stokes variational problem 
problem Stokes([ux, uy, p], [vx, vy, q]) = 
    int2d(Th)( 
        sqrt(Re)*(1./dt)*(ux*vx + uy*vy)
        + tschema * beta * (dx(ux)*dx(vx) + dy(ux)*dy(vx) + dx(uy)*dx(vy)+ dy(uy)*dy(vy))
    )
    // 
    + int2d(Th)( 
        - sqrt(Re)*(1./dt)*(uxo*vx + uyo*vy)
        + (1 - tschema) * beta * (dx(uxo)*dx(vx) + dy(uxo)*dy(vx) + dx(uyo)*dx(vy)+ dy(uyo)*dy(vy))
    )

    // pressure
    - int2d(Th)(xbar*pbar/(rho*eta*ubar)*p*div(vx,vy)) + int2d(Th)(div(ux,uy)*q)
    // fix the pressure mean 
    + int2d(Th)( epsilon * p*q )
    
    //   // P1/P1 stabilization term. Only for P1/P1 FEM 
    + int2d(Th)( (gammap*hTriangle^2/mu) * (dx(p)*dx(q) + dy(p)*dy(q) ))
   
    // Flux sortant
    + int1d(Th, labelSortie)( tschema * beta * (dx(ux)*vx + dx(uy)*vx ) )
    + int1d(Th, labelSortie)(- 10*xbar*pbar/(rho*eta*ubar)*vx)

    // boundary conditions 
    + on(labelBordNeutre, labelBasChauffe, labelHautChauffe, ux=0, uy =0 )
    //+ on(labelSortie, p = 0)
    + on(labelEntree1, ux = 1e-3, uy = -1e-3) 
    + on(labelEntree2, ux = 5e-3, uy = 1e-3) 
    // + on(4, p = 0)
    ;

// func real ux1(){
//     if( l0 < y & y < l/2 ){return (-dP/(2*1)*(y-l/2)*(y));}
//     else{return (-dP/(2*2)*(y-l)*(y-l/2));}
// }

real T=8;
int Niter = T/dt;

uxo = 0;
uyo = 0;
p = 0;

for (int n=0; n< Niter;++n) {

  // update time step
  t += dt ;
  
  // solve Stokes system 
  Stokes;

  // update values for u in concentration
  uxc = ux; //l0 < y & y < l/2 ? ux : 0;
  uyc = uy; //l0 < y & y < l/2 ? uy : 0;

  // Solve
  dConvecDiffTps;

  // update old time levels
  uxo = ux;
  uyo = uy;
  cc = c;
  
  // velocity plot
  uxplot = ux;
  uyplot = uy;
  
  plot([uxplot,uyplot]);
  // concentration  plot
  plot(c, coef=0.2, fill=1, wait=true);
  // pressure plot 
  //plot(p,fill=true,value=true);
  
 }
